name: Enforce PR Approval Policy

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  check-approvals:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.10.0'

      - name: Install dependencies
        run: bun install
        
      - name: Enforce approval policy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node <<'EOF'
          const yaml = require('js-yaml');
          const fs = require('fs');
          const https = require('https');

          const config = yaml.load(fs.readFileSync('.policy-bot.yml', 'utf8'));
          const requiredUsers = config.approval_rules[0].reviewers.users || [];
          const requiredCount = config.approval_rules[0].count || 1;

          const options = {
            hostname: 'api.github.com',
            path: process.env.GITHUB_EVENT_PATH
              ? JSON.parse(fs.readFileSync(process.env.GITHUB_EVENT_PATH)).pull_request.url + '/reviews'
              : '',
            headers: {
              'User-Agent': 'policy-bot-action',
              Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
              Accept: 'application/vnd.github+json'
            }
          };

          if (!options.path) {
            console.error("Couldn't determine PR review URL");
            process.exit(1);
          }

          https.get(options, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
              const reviews = JSON.parse(data);
              const approvedUsers = new Set();

              for (const review of reviews.reverse()) {
                if (review.state === 'APPROVED') {
                  approvedUsers.add(review.user.login);
                } else if (review.state === 'CHANGES_REQUESTED') {
                  approvedUsers.delete(review.user.login);
                }
              }

              const approvedMatches = requiredUsers.filter(user => approvedUsers.has(user));
              if (approvedMatches.length >= requiredCount) {
                console.log(`✅ Approved by: ${approvedMatches.join(', ')}`);
              } else {
                console.error(`❌ Missing required approvals from: ${requiredUsers.join(', ')}`);
                process.exit(1);
              }
            });
          }).on('error', (e) => {
            console.error(e);
            process.exit(1);
          });
          EOF
