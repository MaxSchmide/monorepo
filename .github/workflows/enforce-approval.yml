name: Enforce CODEOWNER Approval and Lock PR

on:
  pull_request:
    types: [opened, ready_for_review, synchronize, reopened]

jobs:
  block-unapproved:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: files
        uses: tj-actions/changed-files@v44
        with:
          separator: ','

      - name: Check CODEOWNER approvals and mark draft if needed
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const changedFiles = '${{ steps.files.outputs.all_changed_files }}'.split(',');

            const prNumber = context.payload.pull_request.number;
            const prUrl = context.payload.pull_request.url;
            const codeownersPath = '.github/CODEOWNERS';

            if (!fs.existsSync(codeownersPath)) {
              core.setFailed('CODEOWNERS file not found.');
              return;
            }

            const lines = fs.readFileSync(codeownersPath, 'utf8')
              .split('\n').filter(l => l.trim() && !l.startsWith('#'));

            const ownersSet = new Set();
            for (const file of changedFiles) {
              for (const line of lines) {
                const [pattern, ...owners] = line.trim().split(/\s+/);
                const regex = new RegExp('^' + pattern.replace('*', '.*'));
                if (regex.test(file)) {
                  owners.forEach(o => ownersSet.add(o.replace(/^@/, '')));
                }
              }
            }

            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            const approved = new Set();
            reviews.data.reverse().forEach(r => {
              if (r.state === 'APPROVED') approved.add(r.user.login);
              if (r.state === 'CHANGES_REQUESTED') approved.delete(r.user.login);
            });

            const requiredOwners = [...ownersSet];
            const hasApproval = requiredOwners.some(o => approved.has(o));

            if (!hasApproval) {
              console.log(`Missing CODEOWNER approval, marking PR as draft.`);
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                draft: true
              });
            } else {
              console.log('Approved by CODEOWNER âœ…');
            }
